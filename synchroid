package Multithreading;

class Stationary
{
	int pencil =20;
	synchronized void getPencil(int pencil1)
	{
		if(pencil>=pencil1)
		{
			pencil-=pencil1;
			System.out.println("pencils given");
			System.out.println("remaining pencils:"+pencil);
		}
		else
		{
			try {
				System.out.println("waiting..........");
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			pencil-=pencil1;
			System.out.println("pencils given");
			System.out.println("remaining pencils:"+pencil);
		}
	}
	synchronized void load(int pencil2)
	{
		pencil+=pencil2;
		System.out.println("loaded");
		System.out.println("available pencils:"+pencil);
		notify();
	}
	
}
class Comm extends Thread
{
	Stationary ob;
	Comm(Stationary ob)
	{
		this.ob =ob;
	}
	public void run()
	{
		ob.getPencil(30);
	}
	
}
public class InterthrdEg extends Thread{
	Stationary ob;
	InterthrdEg(Stationary ob)
	{
		this.ob=ob;
	}
	public void run()
	{
		ob.load(50);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Stationary obj=new Stationary();
		Comm t=new Comm(obj);
		t.start();
		InterthrdEg t2=new InterthrdEg(obj);
		t2.start();
	}

}
